load("@aspect_bazel_lib//lib:tar.bzl", "tar")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")

go_library(
    name = "store_lib",
    srcs = ["main.go"],
    importpath = "github.com/wolfeidau/object-cache/services/store",
    visibility = ["//visibility:private"],
    deps = [
        "//libs/trace",
        "//services/store/internal/commands",
        "@com_github_alecthomas_kong//:kong",
        "@io_opentelemetry_go_otel_trace//:trace",
    ],
)

go_binary(
    name = "store",
    embed = [":store_lib"],
    visibility = ["//visibility:public"],
)

# Put app go_binary into a tar layer.
tar(
    name = "app_layer",
    srcs = [":store"],
    # If the binary depends on RUNFILES, uncomment the attribute below.
    # include_runfiles = True
)

oci_image(
    name = "image",
    base = "@distroless_base",
    entrypoint = ["/store"],
    tars = [":app_layer"],
)

platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@rules_go//go/toolchain:linux_amd64",
    }),
)

oci_load(
    name = "load",
    # Use the image built for the target platform
    image = ":transitioned_image",
    repo_tags = ["gcr.io/wolfeidau/object-cache/store:latest"],
)
